1、https://leetcode-cn.com/problems/remove-outermost-parentheses/
class Solution {
    public String removeOuterParentheses(String S) {
    StringBuilder sb = new StringBuilder();
    int mark = -1;
    for(int i=0;i<S.length();i++){
        char c = S.charAt(i);
        if(c=='('){
            mark++;
        }
        if(c==')'){
            mark--;
        }
        if(mark==0&&c=='('||mark==-1&&c==')'){
            continue;
        }
        sb.append(c);
    }
return sb.toString();
    }
}
2、https://leetcode-cn.com/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/
class CQueue {
    public Stack<Integer> stack1;
    public Stack<Integer> stack2;
    public CQueue() {
    stack1 = new Stack<>();
    stack2 = new Stack<>();
    }
    
    public void appendTail(int value) {
      stack1.push(value);
    }
    
    public int deleteHead() {
        if(stack2.empty()){
            while(!stack1.empty()){
                stack2.push(stack1.pop());
            }
        }
        if(stack2.empty()){
            return -1;
        }else{
            return stack2.pop();
        }
    }
}

3、https://leetcode-cn.com/problems/implement-queue-using-stacks-lcci/
class MyQueue {
    public Stack<Integer> stack1;
    public Stack<Integer> stack2;
    /** Initialize your data structure here. */
    public MyQueue() {
        stack1 = new Stack<>();
        stack2 = new Stack<>();
    }
    
    /** Push element x to the back of queue. */
    public void push(int x) {
     stack1.push(x);
    }
    
    /** Removes the element from in front of queue and returns that element. */
    public int pop() {
     if(stack2.empty()){
         while(!stack1.empty()){
             stack2.push(stack1.pop());
            }
        }
        if(stack2.empty()){
            return -1;
        }else{
            return stack2.pop();
        }
    }
    
    /** Get the front element. */
    public int peek() {
         if(stack2.empty()){
         while(!stack1.empty()){
             stack2.push(stack1.pop());
            }
        }
        if(stack2.empty()){
            return -1;
        }else{
            return stack2.peek();
        }
    }
    
    /** Returns whether the queue is empty. */
    public boolean empty() {
        if(stack1.empty()&&stack2.empty()){
            return true;
        }
        return false;
    }
}
4、https://leetcode-cn.com/problems/remove-all-adjacent-duplicates-in-string/
class Solution {
    public String removeDuplicates(String S) {
    Stack<Character>   ab  = new Stack<>();
    Stack<Character>   cd  = new Stack<>();
    char[] c = S.toCharArray();
    for(int i=0;i<c.length;i++){
        if(ab.empty()){
            ab.push(c[i]);
        }else{
            if(c[i]==ab.peek()){
              ab.pop();
            }else{
                ab.push(c[i]);
            }
        }
        
    }
    if(cd.empty()){
        while(!ab.empty()){
         cd.push(ab.pop());
        }
    }
    StringBuilder  s = new StringBuilder();
    while(!cd.empty()){
        s.append(cd.pop()) ;
    }
     return s.toString();
    }
}
5、https://leetcode-cn.com/problems/next-greater-element-i/
class Solution {
    public int[] nextGreaterElement(int[] nums1, int[] nums2) {
    int[] res = new int[nums1.length];
        for(int i=0;i<nums1.length;i++){
            int j=0;
            for(;j<nums2.length;j++){
                if(nums2[j]==nums1[i]){
                    break;
                }
            }
            while(j<nums2.length){
                if(nums2[j]>nums1[i]){
                    res[i]=nums2[j];
                    break;
                }else{
                    j++;
                }
            }
            if(j==nums2.length){
               res[i]=-1;
            }
        }
     return res;
    }
}
