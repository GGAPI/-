1、一维数组的动态和
给你一个数组 nums 。数组「动态和」的计算公式为：runningSum[i] = sum(nums[0]…nums[i]) 。请返回 nums 的动态和。
class Solution {
    public int[] runningSum(int[] nums) {
        Scanner sc = new Scanner(System.in);
        for(int i=1;i<nums.length;i++){
            nums[i]=nums[i-1]+nums[i];
        }
        return nums;
    }
}
2、好数对的数目
给你一个整数数组 nums 。如果一组数字 (i,j) 满足 nums[i] == nums[j] 且 i < j ，就可以认为这是一组好数对 。返回好数对的数目。
https://leetcode-cn.com/problems/number-of-good-pairs/
class Solution {
    public int numIdenticalPairs(int[] nums) {
    int count=0; 
    for(int i=0;i<nums.length;i++){
        for(int j=i+1;j<nums.length;j++){
            if(nums[i]==nums[j]){
            count++;
            }
        }
    }
    return count;
    }
}
3、https://leetcode-cn.com/problems/kids-with-the-greatest-number-of-candies/
class Solution {
    public List<Boolean> kidsWithCandies(int[] candies, int extraCandies) {
        int max = 0;
        for(int i=0;i<candies.length;i++){
           if(max<candies[i]){
               max=candies[i];
           }
        }
        List<Boolean> a = new ArrayList<>();
        for(int i=0;i<candies.length;i++){
            if((candies[i]+extraCandies)>=max){
                a.add(true);
            }else{
                a.add(false);
            }
        }
        return a;
    }
}
4、https://leetcode-cn.com/problems/shuffle-the-array/
class Solution {
    public int[] shuffle(int[] nums, int n) {
        int[] ch = new int[n*2];
        int j = 0;
        for(int i=0;i<n;i++){
            ch[j++]=nums[i];
            ch[j++]=nums[i+n];
        }
        return ch;
    }
}
5、https://leetcode-cn.com/problems/matrix-diagonal-sum/
class Solution {
    public int diagonalSum(int[][] mat) {
        int len = mat.length;
        int sum = 0;
        for(int i=0;i<len;i++){
                sum+=mat[i][i]+mat[i][len-i-1];
        }
        if(len%2==1){
                sum-=mat[len/2][len/2];
            }
        return sum;
    }
}